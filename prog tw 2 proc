1. Napisz program tworzący dwa procesy. Każdy ze stworzonych procesów powinien utworzyć proces - potomka. Należy wyświetlać identyfikatory procesów rodziców i potomków po każdym wywołaniu funkcji fork.
2. Napisz program którego rezultatem będzie wydruk zawartości bieżącego katalogu poprzedzony napisem „Poczatek" a zakończony napisem „Koniec"
(C)
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
1----------------
int main(){
    printf("Poczatek\n");
    printf("ID: %d\n", getpid());
    int f1 = fork();
    if(f1==0) {
        printf("Potomek f1 ID: %d PPID %d\n", getpid(), getppid());
        int f11 = fork ();
            if(f11==0){
            printf("Potomek f11 ID: %d PPID: %d\n",  getpid(), getppid());
        exit(0);
        }
        exit(0);
    }

    int f2 = fork();
    if(f2==0) {
        printf("Potomek f2 ID: %d PPID %d\n", getpid(), getppid());
        int f22 = fork ();
            if(f22==0){
            printf("Potomek f22 ID: %d PPID: %d\n",  getpid(), getppid());
    exit(0);
    }

    exit(0);
    }
printf("Koniec\n");

return 0;

#include<sys/wait.h>
2-------------------------------
int main(){
	printf("Poczatek\n");
	if (fork() == 0){
		execlp("ls", "ls", "-a", NULL);
	}
	wait(NULL);
	printf("Koniec\n");
}
}



3.Napisz program który utworzy dowolny plik o dowolnej nazwie (jeśli już taki istnieje, program powinien go otworzyć w trybie „dopisywania”). Program powinien dopisywać losowo wygenerowane ciągi znaków - liczba słów powinna być uzależniona od
zmiennej środowiskowej, jak również maksymalna liczba znaków). W programie powinny także powstać dwa osobne procesy które zrobią dokładnie to samo, co główny proces.

3-------------------------------

int main() {
    srand(getpid());

    // Pobranie wartości zmiennych środowiskowych
    char *env_num_words = getenv("NUM_WORDS");
    char *env_max_chars = getenv("MAX_CHARS");
    int num_words = env_num_words ? atoi(env_num_words) : DEFAULT_WORDS;
    int max_chars = env_max_chars ? atoi(env_max_chars) : DEFAULT_MAX_CHARS;
    
    // Główny proces zapisuje do pliku
    write_random_text(FILE_NAME, num_words, max_chars);
    
    // Tworzenie dwóch procesów potomnych
    for (int i = 0; i < 2; i++) {
        pid_t pid = fork();
        if (pid == 0) { // Kod dla procesu potomnego
            write_random_text(FILE_NAME, num_words, max_chars);
            exit(EXIT_SUCCESS);
        } else if (pid < 0) {
            perror("Błąd podczas tworzenia procesu potomnego");
            exit(EXIT_FAILURE);
        }
    }
    
    // Oczekiwanie na zakończenie procesów potomnych
    wait(NULL);
    wait(NULL);
    
    return 0;
}

